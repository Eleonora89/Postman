{
	"info": {
		"_postman_id": "c3878e6a-4c9c-45e9-9257-e8396382171e",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							" pm.test(\"response\", function () {\r",
							"    pm.response.to.have.string;   \r",
							"});\r",
							"console.log(pm.response);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(typeof \" \")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {pm.response.to.have.status(200)});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your name\", function () {\r",
							"    pm.expect(jsonData. name).to.eql(\"vlad\");\r",
							"});\r",
							"console.log(pm.response.json())\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"50\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(10000);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"var requestJ = request.data\r",
							"console.log(request.data)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"name.req = name.res\", function () {pm.expect(jsonData.name).to.eql(requestJ.name)});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var requestJ = request.data\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"age.req = age.res\", function () {pm.expect(jsonData.age).to.eql(requestJ.age)});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var requestJ = request.data\r",
							"console.log(requestJ)\r",
							"\r",
							"var jsonData = pm.response.json ( )\r",
							"console.log(jsonData)\r",
							"\r",
							"var req_salary_nub = + requestJ.salary\r",
							"console.log(req_salary_nub)\r",
							"\r",
							"pm.test(\"salary.req = salary.res\", function ( ) {pm.expect(jsonData.salary).to.eql(req_salary_nub)});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json( ).family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"var requestJ = request.data\r",
							"console.log(requestJ);\r",
							"var req_numb = + requestJ.salary\r",
							"console.log(req_numb)\r",
							"var jsonData = pm.response.json( ).family\r",
							"\r",
							"pm.test(\"salary.req = salary.res\", function ( ) { \r",
							"pm.expect(jsonData.u_salary_1_5_year).to.eql(req_numb*4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "vlad",
							"type": "text"
						},
						{
							"key": "age",
							"value": "50",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "",
							"disabled": true
						},
						{
							"key": "age",
							"value": "",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var resN = pm.response.json ()\r",
							"console.log(resN)\r",
							"\r",
							"//Спарсить request\r",
							"var reqBody = pm.request.toJSON ( ).url.query;\r",
							"console.log(reqBody)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var reqBody = pm.request.toJSON ( ).url.query[0].value;\r",
							"console.log(reqBody)\r",
							"pm.test(\"name=name\", function () {\r",
							"    pm.expect(resN.name).to.eql(reqBody);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var reqB4 = pm.request.toJSON ( ).url.query[1].value\r",
							"console.log(reqB4)\r",
							"pm.test(\"age=age\", function () {\r",
							"    pm.expect(resN.age).to.eql(reqB4);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var resN = pm.response.json ()\r",
							"console.log(resN)\r",
							"var reqB5= pm.request.toJSON ( ).url.query[2].value;\r",
							"console.log(reqB5)\r",
							"var reqB6 = + reqB5\r",
							"console.log(reqB6)\r",
							"pm.test(\"salary=salary\", function () {\r",
							"    pm.expect(resN.salary).to.eql(reqB6);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json( ).family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"var respD = pm.response.json().family.pets.dog;\r",
							"console.log(respD)\r",
							"pm.test('dog', function() {\r",
							"  pm.expect(respD).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test('dog', function() {\r",
							"  pm.expect(respD).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test('name', function() {\r",
							"  pm.expect(respD.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test('age', function() {\r",
							"  pm.expect(respD).to.have.property(\"age\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Eleonora&age=32&salary=100000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Eleonora"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "100000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var resp4 = pm.response.json ();\r",
							"console.log(resp4)\r",
							"\r",
							"//Спарсить request.\r",
							"var req4 = pm.request.toJSON ().url.query\r",
							"console.log(req4)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req5 = pm.request.toJSON ().url.query[0].value\r",
							"console.log(req5)\r",
							"pm.test(\"name=name\", function () {\r",
							"    pm.expect(resp4.name).to.eql(req5);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var req4 = pm.request.toJSON ().url.query[1].value\r",
							"console.log(req4)\r",
							"pm.test(\"age=age\", function () {\r",
							"    pm.expect(resp4.age).to.eql(Number(req4));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"var req4 = pm.request.toJSON ().url.query[2].value\r",
							"console.log(req4)\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"var req4 = pm.request.toJSON ().url.query[2].value\r",
							"console.log(req4)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"var resp4 = pm.response.json ( ).salary [0]\r",
							"console.log(resp4)\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"var resp4 = pm.response.json ( ).salary [1]\r",
							"console.log(resp4)\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"var resp4 = pm.response.json ( ).salary [2]\r",
							"console.log(resp4)\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var req4 = + pm.request.toJSON ().url.query[2].value\r",
							"console.log(req4)\r",
							"var resp4 = pm.response.json ( ).salary [0]\r",
							"console.log(resp4)\r",
							"pm.test(\"salary0=salary\", function () {\r",
							"    pm.expect(resp4).to.eql(req4);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"var req4 = pm.request.toJSON ().url.query[2].value *2;\r",
							"console.log(req4)\r",
							"var resp4 = + pm.response.json ( ).salary [1]\r",
							"console.log(resp4)\r",
							"pm.test(\"salary1=salary\", function () {\r",
							"    pm.expect(resp4).to.eql(req4);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"var req4 = pm.request.toJSON ().url.query[2].value *3;\r",
							"console.log(req4)\r",
							"var resp4 = + pm.response.json ( ).salary [2]\r",
							"console.log(resp4)\r",
							"pm.test(\"salary2=salary\", function () {\r",
							"    pm.expect(resp4).to.eql(req4);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name, age, salary\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"var respN = pm.request.toJSON ().url.query[0].value ;\r",
							"console.log(respN);\r",
							"pm.environment.set(\"name\", respN);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"var respAge = pm.request.toJSON ().url.query[1].value ;\r",
							"console.log(respAge);\r",
							"pm.environment.set(\"age\", respAge);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"var respSalary = pm.request.toJSON ().url.query[2].value ;\r",
							"console.log(respSalary);\r",
							"pm.environment.set(\"salary\", respSalary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var respN = pm.response. json ().salary\r",
							"console.log(respN)\r",
							"for (key in respN)\r",
							"console.log(respN[key])\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Eleonora&age=32&salary=100000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Eleonora"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "100000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var resBody = pm.response.json ();\r",
							"console.log(resBody);\r",
							"\r",
							"//Спарсить request.\r",
							"var reqBody = request.data;\r",
							"console.log(reqBody)\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(resBody).to.have.property(\"start_qa_salary\");;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resBody).to.have.property(\"qa_salary_after_6_months\");;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resBody).to.have.property(\"qa_salary_after_12_months\");;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resBody).to.have.property(\"qa_salary_after_1.5_year\");;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resBody).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(resBody).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(resBody.start_qa_salary).to.eql(parseInt(reqBody.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resBody.qa_salary_after_6_months).to.eql(parseInt(reqBody.salary)*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months \", function () {\r",
							"    pm.expect(resBody.qa_salary_after_12_months).to.eql(parseInt(reqBody.salary)*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resBody[\"qa_salary_after_1.5_year\"]).to.eql(parseInt(reqBody.salary)*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resBody[\"qa_salary_after_3.5_years\"]).to.eql(parseInt(reqBody.salary)*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"var resBody1 = pm.response.json ().person.u_name[1];\r",
							"console.log(resBody1);\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(resBody1).to.eql(parseInt(reqBody.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"var resBody2 = pm.response.json ().person.u_age\r",
							"console.log(resBody2);\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(resBody2).to.eql(parseInt(reqBody.age));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"var resBody3 = pm.response.json ().person\r",
							"console.log(resBody3);\r",
							"pm.test(\"u_salary_5_years\", function () {\r",
							"    pm.expect(resBody3.u_salary_5_years).to.eql(parseInt(reqBody.salary)*4.2);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (var j = 0; j < resBody3.u_name.length; j++) {\r",
							"    console.log(\"Элемент - \"+String(j), resBody3.u_name[j]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
